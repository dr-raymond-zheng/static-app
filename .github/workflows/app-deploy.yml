name: App Deploy (S3 + CloudFront)
on:
  pull_request:
    branches: [ "main" ]
    paths:
      - "**"
      - "!README.md"
  push:
    branches: [ "main" ]
    paths:
      - "**"
      - "!README.md"

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-2
  S3_BUCKET: ${{ vars.S3_BUCKET }}
  CF_DIST_ID: ${{ vars.CF_DIST_ID }}
  GHA_APP_ROLE_ARN: ${{ vars.GHA_APP_ROLE_ARN }}

jobs:
  secret-scan:
    name: Secret Leak Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main

  codeql-analyze:
    needs: [secret-scan]
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: [secret-scan, codeql-analyze]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install deps & build
        run: |
          npm ci
          npm run build
      - name: Copy rate-limit.html to build folder
        run: cp rate-limit.html build/rate-limit.html
      - name: Configure AWS creds via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.GHA_APP_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload assets (immutable)
        run: |
          aws s3 sync build/ s3://$S3_BUCKET             --cache-control "public,max-age=31536000,immutable"             --delete

      - name: Upload index.html (no-cache)
        run: |
          aws s3 cp build/index.html s3://$S3_BUCKET/index.html             --cache-control "no-cache"             --metadata-directive REPLACE             --content-type text/html

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation             --distribution-id "$CF_DIST_ID"             --paths "/index.html" "/"

      - name: Validate website
        id: validate
        run: |
          sleep 30 # Wait for CloudFront to propagate
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$CF_DIST_ID.cloudfront.net/index.html)
          if [ "$STATUS" -ne 200 ]; then
            echo "Validation failed: HTTP $STATUS"
            exit 1
          fi
          echo "Validation passed: HTTP $STATUS"

      - name: Rollback deployment if validation fails
        if: failure() && steps.validate.outcome == 'failure'
        run: |
          echo "Rolling back: restoring previous S3 object versions for all objects in bucket $S3_BUCKET"
          for KEY in $(aws s3api list-object-versions --bucket $S3_BUCKET --query 'Versions[].Key' --output text | tr '\t' '\n' | sort | uniq); do
            PREV_VERSION=$(aws s3api list-object-versions --bucket $S3_BUCKET --prefix "$KEY" --query 'Versions[1].VersionId' --output text)
            if [ "$PREV_VERSION" != "None" ] && [ "$PREV_VERSION" != "" ]; then
              aws s3api copy-object --bucket $S3_BUCKET --key "$KEY" --copy-source "$S3_BUCKET/$KEY?versionId=$PREV_VERSION"
              echo "Restored $KEY to previous version $PREV_VERSION"
            else
              echo "No previous version found for $KEY, skipping."
            fi
          done
          aws cloudfront create-invalidation --distribution-id "$CF_DIST_ID" --paths "/*"
